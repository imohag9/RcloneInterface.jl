var documenterSearchIndex = {"docs":
[{"location":"api/#API-Referenece","page":"API Reference","title":"API Referenece","text":"","category":"section"},{"location":"api/#RcloneInterface._collectexecoutput-Tuple{Cmd}","page":"API Reference","title":"RcloneInterface._collectexecoutput","text":"_collectexecoutput(exec::Cmd)\n\nRun the command and return the dominant output stream as a string.\n\n\n\n\n\n","category":"method"},{"location":"api/#RcloneInterface._readexecoutput-Tuple{Cmd}","page":"API Reference","title":"RcloneInterface._readexecoutput","text":"_readexecoutput(exec::Cmd) -> (stdout_lines, stderr_lines)\n\nCapture stdout and stderr as Vector{String}.\n\n\n\n\n\n","category":"method"},{"location":"api/#RcloneInterface.rclone_check-Tuple{AbstractString, AbstractString}","page":"API Reference","title":"RcloneInterface.rclone_check","text":"rclone_check(src::AbstractString, dest::AbstractString; kwargs...)\n\nVerify that files in source and destination match (size + hash by default).\n\nReturns the raw output (useful for parsing mismatch reports).\n\nArguments\n\nsrc, dest: paths to compare\n\nKeyword arguments\n\nsize_only::Bool = false → skip hash check\ndownload::Bool = false → download and compare byte-by-byte\none_way::Bool = false → only check that source files exist in dest\ncheckfile::Union{Nothing,String} = nothing → treat src as SUM file\n\nLogging/reporting (like sync)\n\ncombined, differ, missing_on_dst, missing_on_src, error_log\n\nFiltering & verbosity\n\nexclude, include, verbose, etc.\n\nExample\n\noutput = rclone_check(\"local:/data\", \"s3:backup\", size_only=true, verbose=1)\nprintln(output)\n\n\n\n\n\n","category":"method"},{"location":"api/#RcloneInterface.rclone_copy-Tuple{AbstractString, AbstractString}","page":"API Reference","title":"RcloneInterface.rclone_copy","text":"rclone_copy(src::AbstractString, dest::AbstractString; kwargs...)\n\nCopy files from src to dest using rclone copy.\n\nArguments\n\nsrc: Source path (e.g., \"local:/path\" or \"remote:bucket/dir\")\ndest: Destination path\n\nKeyword arguments (common flags)\n\ndry_run::Bool = false: Do a trial run without copying (--dry-run)\nverbose::Int = 0: Verbosity level (-v, -vv, etc.)\nchecksum::Bool = false: Use checksum + size to detect changes (-c)\nupdate::Bool = false: Skip files newer on destination (-u)\nignore_existing::Bool = false: Skip files that already exist\nmax_age::Union{Nothing, String} = nothing: Only copy files younger than this (e.g., \"24h\")\nexclude::Vector{String} = String[]: Patterns to exclude\ninclude::Vector{String} = String[]: Patterns to include\nmetadata::Bool = false: Preserve metadata (-M)\nprogress::Bool = false: Show progress (-P)\nextra_flags::Vector{String} = String[]: Additional raw flags\n\nExample\n\nrclone_copy(\"mylocal:/data\", \"gdrive:backup\", dry_run=true, verbose=1)\n\n\n\n\n\n","category":"method"},{"location":"api/#RcloneInterface.rclone_dedupe-Tuple{AbstractString}","page":"API Reference","title":"RcloneInterface.rclone_dedupe","text":"rclone_dedupe(path::AbstractString; kwargs...)\n\nFind and resolve duplicate files (by name or hash).\n\n⚠️ Can delete or rename files. Use dry_run=true first!\n\nArguments\n\npath: remote path to dedupe\n\nKeyword arguments\n\nby_hash::Bool = false → dedupe by content hash instead of name\ndedupe_mode::String = \"interactive\" → \"skip\", \"first\", \"newest\", \"rename\", etc.\nsize_only::Bool = false → use size only (for backends without hash)\ndry_run::Bool = false\ninteractive::Bool = false\nverbose::Int = 0\n\nExample\n\nrclone_dedupe(\"gdrive:photos\", dedupe_mode=\"rename\", dry_run=true)\nrclone_dedupe(\"crypt:backups\", by_hash=true, dedupe_mode=\"largest\")\n\n\n\n\n\n","category":"method"},{"location":"api/#RcloneInterface.rclone_delete-Tuple{AbstractString}","page":"API Reference","title":"RcloneInterface.rclone_delete","text":"rclone_delete(path::AbstractString; kwargs...)\n\nDelete files in the given path, respecting filters. Does not delete directories unless rmdirs=true is used.\n\n⚠️ Warning: This permanently deletes data. Always test with dry_run=true.\n\nArguments\n\npath: Remote or local path to delete from\n\nKeyword arguments\n\ndry_run::Bool = false\ninteractive::Bool = false\nrmdirs::Bool = false → also remove empty directories\nverbose::Int = 0\n\nFiltering (same as other commands)\n\nexclude, include, max_age, min_size, etc.\n\nExample\n\nrclone_delete(\"gdrive:temp\", dry_run=true, max_size=\"1G\")\nrclone_delete(\"s3:bucket/logs\", rmdirs=true, min_age=\"7d\")\n\n\n\n\n\n","category":"method"},{"location":"api/#RcloneInterface.rclone_exe-Tuple{Cmd}","page":"API Reference","title":"RcloneInterface.rclone_exe","text":"rclone_exe(cmd::Cmd; collect = true)\n\nExecute rclone with the given Cmd.\n\n\n\n\n\n","category":"method"},{"location":"api/#RcloneInterface.rclone_exe-Tuple{Vararg{AbstractString}}","page":"API Reference","title":"RcloneInterface.rclone_exe","text":"rclone_exe(args::AbstractString...; collect = true)\n\nExecute rclone with the given arguments. Returns stdout/stderr as a string if collect=true (default).\n\n\n\n\n\n","category":"method"},{"location":"api/#RcloneInterface.rclone_help-Tuple{}","page":"API Reference","title":"RcloneInterface.rclone_help","text":"rclone_help(; topic::Union{Nothing, String} = nothing)\n\nShow general help or help for a specific command/topic.\n\nReturns help text as a string.\n\nArguments\n\ntopic: e.g., \"sync\", \"mount\", or a backend name like \"s3\"\n\nExample\n\ngeneral = rclone_help()\nsync_help = rclone_help(topic=\"sync\")\n\n\n\n\n\n","category":"method"},{"location":"api/#RcloneInterface.rclone_ls-Tuple{AbstractString}","page":"API Reference","title":"RcloneInterface.rclone_ls","text":"rclone_ls(path::AbstractString; kwargs...)\n\nList files in the given path with size and path (like rclone ls).\n\nReturns a string with one line per file: <size> <path>\n\nArguments\n\npath: Remote or local path to list\n\nKeyword arguments\n\nmax_depth::Int = -1 → --max-depth N (default: recurse fully)\nrecursive::Bool = true → controls recursion (note: ls recurses by default)\nexclude::Vector{String} = String[]\ninclude::Vector{String} = String[]\nmax_age, min_age, max_size, min_size\nfiles_only::Bool = true (default behavior)\ndirs_only::Bool = false\nfast_list::Bool = false → --fast-list\nverbose::Int = 0\nextra_flags::Vector{String} = String[]\n\nNote: rclone ls recurses by default. Use max_depth=1 to list only top level.\n\n```\n\n\n\n\n\n","category":"method"},{"location":"api/#RcloneInterface.rclone_move-Tuple{AbstractString, AbstractString}","page":"API Reference","title":"RcloneInterface.rclone_move","text":"rclone_move(src::AbstractString, dest::AbstractString; kwargs...)\n\nMove files from source to destination. After a successful move, files are deleted from the source.\n\n⚠️ Warning: This can cause data loss. Always test with dry_run=true.\n\nArguments\n\nsrc: Source path\ndest: Destination path\n\nKeyword arguments\n\nSafety & testing\n\ndry_run::Bool = false\ninteractive::Bool = false\n\nBehavior\n\nchecksum::Bool = false\nupdate::Bool = false\nignore_existing::Bool = false\nsize_only::Bool = false\nignore_times::Bool = false\nmetadata::Bool = false\n\nSource cleanup\n\ndelete_empty_src_dirs::Bool = false → --delete-empty-src-dirs\ncreate_empty_src_dirs::Bool = false → --create-empty-src-dirs\n\nFiltering\n\nmax_age, min_age, max_size, min_size\nexclude::Vector{String} = String[]\ninclude::Vector{String} = String[]\nno_traverse::Bool = false\n\nOutput & control\n\nverbose::Int = 0\nprogress::Bool = false\nextra_flags::Vector{String} = String[]\n\nExample\n\nrclone_move(\"local:/tmp/old\", \"archive:old\", dry_run=true)\nrclone_move(\"s3:bucket/temp\", \"gcs:archive\", delete_empty_src_dirs=true, checksum=true)\n\n\n\n\n\n","category":"method"},{"location":"api/#RcloneInterface.rclone_size-Tuple{AbstractString}","page":"API Reference","title":"RcloneInterface.rclone_size","text":"rclone_size(path::AbstractString; kwargs...)\n\nPrint the total size and number of objects in path.\n\nReturns a string with human-readable summary (e.g., \"Total objects: 123, Total size: 4.5 GiB\").\n\nKeyword arguments\n\nmax_depth::Int = -1 → limit recursion depth\nexclude::Vector{String} = String[]\ninclude::Vector{String} = String[]\nmax_age, min_age, max_size, min_size\nfast_list::Bool = false\njson::Bool = false → return JSON-formatted output instead\nextra_flags::Vector{String} = String[]\n\nExample\n\nsummary = rclone_size(\"gdrive:photos\")\njson_out = rclone_size(\"s3:bucket\", json=true)\n\n\n\n\n\n","category":"method"},{"location":"api/#RcloneInterface.rclone_sync-Tuple{AbstractString, AbstractString}","page":"API Reference","title":"RcloneInterface.rclone_sync","text":"rclone_sync(src::AbstractString, dest::AbstractString; kwargs...)\n\nSynchronize the source to the destination, making the destination identical to the source. This may delete files in the destination that are not present in the source.\n\n⚠️ Warning: This command can cause data loss. Always test with dry_run=true.\n\nArguments\n\nsrc: Source path (e.g., \"local:/data\" or \"remote:bucket/dir\")\ndest: Destination path\n\nKeyword arguments (common & sync-specific flags)\n\nSafety & Testing\n\ndry_run::Bool = false        → --dry-run\ninteractive::Bool = false    → --interactive (-i)\n\nCore behavior\n\nchecksum::Bool = false       → -c, use checksum + size\nupdate::Bool = false         → -u, skip files newer on destination\nignore_existing::Bool = false→ skip files that already exist\nsize_only::Bool = false      → skip based on size only\nignore_times::Bool = false   → -I, transfer all unconditionally\nmetadata::Bool = false       → -M, preserve metadata\n\nDeletion control\n\nmax_delete::Int = -1         → --max-delete N (default: unlimited)\ndelete_excluded::Bool = false→ --delete-excluded\nignore_errors::Bool = false  → delete even if I/O errors occur\n\nPerformance & filtering\n\nno_traverse::Bool = false    → --no-traverse\nmax_age::Union{Nothing,String} = nothing\nmin_age::Union{Nothing,String} = nothing\nmax_size::Union{Nothing,String} = nothing\nmin_size::Union{Nothing,String} = nothing\nexclude::Vector{String} = String[]\ninclude::Vector{String} = String[]\n\nLogging & reporting (output to file or stdout)\n\ncombined::Union{Nothing,String} = nothing      → --combined FILE\ndiffer::Union{Nothing,String} = nothing        → --differ FILE\nmissing_on_dst::Union{Nothing,String} = nothing\nmissing_on_src::Union{Nothing,String} = nothing\nerror_log::Union{Nothing,String} = nothing     → --error FILE\n\nOther\n\nverbose::Int = 0             → -v, -vv, etc.\nprogress::Bool = false       → -P\ncreate_empty_src_dirs::Bool = false\ntrack_renames::Bool = false  → enable rename detection\nextra_flags::Vector{String} = String[]\n\nExample\n\nrclone_sync(\"local:/photos\", \"gdrive:backup/photos\", dry_run=true, verbose=1)\nrclone_sync(\"s3:mybucket\", \"b2:archive\", max_delete=100, checksum=true)\n\n\n\n\n\n","category":"method"},{"location":"api/#RcloneInterface.rclone_tree-Tuple{AbstractString}","page":"API Reference","title":"RcloneInterface.rclone_tree","text":"rclone_tree(path::AbstractString; kwargs...)\n\nPrint a directory tree of the remote path.\n\nReturns a string showing the hierarchical structure.\n\nKeyword arguments\n\nmax_depth::Int = -1\ndirs_only::Bool = false\nfiles_only::Bool = false\nexclude, include, max_age, etc. (same as other commands)\nextra_flags::Vector{String} = String[]\n\nExample\n\ntree = rclone_tree(\"dropbox:projects\", max_depth=2)\nprintln(tree)\n\n\n\n\n\n","category":"method"},{"location":"api/#RcloneInterface.rclone_version-Tuple{}","page":"API Reference","title":"RcloneInterface.rclone_version","text":"rclone_version(; check::Bool = false, deps::Bool = false)\n\nReturn the rclone version info as a string.\n\nKeyword arguments\n\ncheck::Bool = false → compare with latest release/beta online\ndeps::Bool = false → show Go dependencies\n\nExample\n\nprintln(rclone_version())\nprintln(rclone_version(check=true))\n\n\n\n\n\n","category":"method"},{"location":"commands/#Supported-Commands","page":"Commands","title":"Supported Commands","text":"","category":"section"},{"location":"commands/","page":"Commands","title":"Commands","text":"RcloneInterface.jl provides high-level Julia wrappers for the most commonly used rclone operations. All functions support filtering (exclude, include, max_age, etc.), verbosity control, and an extra_flags escape hatch for advanced options.","category":"page"},{"location":"commands/","page":"Commands","title":"Commands","text":"Command Function Description\nCopy rclone_copy(src, dst; ...) Copy files from source to destination (non-destructive).\nSync rclone_sync(src, dst; ...) Make destination identical to source (can delete files).\nMove rclone_move(src, dst; ...) Move files and delete from source after transfer.\nList rclone_ls(path; ...) List files with size (like rclone ls).\nDelete rclone_delete(path; ...) Delete files matching filters (use dry_run=true).\nCheck rclone_check(src, dst; ...) Verify file integrity via size/hash.\nDedupe rclone_dedupe(path; ...) Find and resolve duplicate files.\nSize rclone_size(path; ...) Get total object count and size summary.\nTree rclone_tree(path; ...) Print directory hierarchy.\nMount rclone_mount(remote, local; ...) Mount remote as local filesystem (blocks).\nVersion rclone_version() Show rclone version info.\nHelp rclone_help(topic=\"sync\") Get help for any command or backend.","category":"page"},{"location":"commands/","page":"Commands","title":"Commands","text":"All functions:","category":"page"},{"location":"commands/","page":"Commands","title":"Commands","text":"Accept local paths (\"local:/data\") or configured remotes (\"gdrive:backup\").\nDefault to safe mode where applicable (dry_run=true for destructive ops).\nReturn command output as a string for parsing or logging.","category":"page"},{"location":"commands/","page":"Commands","title":"Commands","text":"```","category":"page"},{"location":"#RcloneInterface.jl","page":"Home","title":"RcloneInterface.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A Julia-native interface to Rclone — the powerful command-line tool for managing files across cloud storage, local filesystems, and enterprise services.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package wraps rclone commands in idiomatic Julia functions with keyword arguments, automatic binary management (via Rclone_jll), and safety defaults like dry_run=true. No need to install rclone separately.","category":"page"},{"location":"","page":"Home","title":"Home","text":"⚠️ You must configure remotes (e.g., Google Drive, S3) using rclone config outside Julia before using them. Local paths work immediately.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"RcloneInterface\")","category":"page"},{"location":"#Quick-Example","page":"Home","title":"Quick Example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using RcloneInterface\n\n# List files\nrclone_ls(\"local:/home/user\")\n\n# Safely preview a sync\nrclone_sync(\"local:/photos\", \"gdrive:backup\", dry_run=true)","category":"page"}]
}
